const Bluebird = require('bluebird');
const AWS = require('aws-sdk');
AWS.config.setPromisesDependency(Bluebird);
AWS.config.update({region: 'us-west-2'});
const s3 = new AWS.S3({apiVersion: '2006-03-01'});
const dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});
const sharp = require('sharp');

module.exports = {
  Query: {
    pictures: async (_source, _args, { dataSources }) => {
      return dataSources.picturesApi.getPictures();
    }
  },
  Mutation: {
    singleUpload: async (parent, { file }) => {
      let imageInfo;
      const pictureId = Date.now();
      const { createReadStream, filename, mimetype, encoding } = await file;

      const imageResize = sharp()
        .on('info', (info) => {
          imageInfo = info
        })
        .resize(1024, 1024, {
          fit: 'inside',
          withoutEnlargement: true
        })
        .jpeg();

      const params = {
        Bucket: 'dngo.sample',
        Key: `photos/${pictureId}.jpg`,
        Body: createReadStream().pipe(imageResize)
      };

      return s3.upload(params).promise().then((data) => {
        var params = {
          Item: {
            id: {
              S: pictureId.toString()
            },
            data: {
              S: JSON.stringify({
                id: `${pictureId}.jpg`,
                imageSize: {
                  width: imageInfo.width,
                  height: imageInfo.height
                }
              })
            }
          },
          TableName: "Pictures"
        };

        return dynamodb.putItem(params).promise();
      }).then(() => {
        return { filename, mimetype, encoding, id: pictureId, imageSize: { width: imageInfo.width, height: imageInfo.height} }
      }).catch((error) => {
        throw new Error(error);
      });
    }
  }
};